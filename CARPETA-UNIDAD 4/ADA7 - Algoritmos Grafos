
###### Algoritmo de Dijkstra 
import heapq

def dijkstra(graph, start):
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    queue = [(0, start)]
    
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        
        if current_distance > distances[current_node]:
            continue
        
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))
    
    return distances

graph = {
    'A': {'B': 3, 'C': 4},
    'B': {'C': 1, 'D': 2},
    'C': {'D': 5},
    'D': {}
}

start_node = 'A'
print("Distancias mínimas desde el nodo", start_node, ":", dijkstra(graph, start_node))



##### Algoritmo de Floyd

class Grafo:
    def __init__(self, vertices):
        self.V = vertices
        self.grafo = [[0 for columna in range(vertices)] for fila in range(vertices)]

    def floyd(self):
        dist = list(map(lambda i : list(map(lambda j : j , i)) , self.grafo))
        for k in range(self.V):
            for i in range(self.V):
                for j in range(self.V):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
        return dist

grafo = Grafo(4)
grafo.grafo = [[0, 5, float('inf'), 10],
        [float('inf'), 0, 3, float('inf')],
        [float('inf'), float('inf'), 0, 1],
        [float('inf'), float('inf'), float('inf'), 0]
        ]
print(grafo.floyd())


##### Algoritmo de Warshall 

class Grafo:
    def __init__(self, vertices):
        self.V = vertices
        self.grafo = [[0 for columna in range(vertices)] for fila in range(vertices)]

    def warshall(self):
        reach = [[0 for i in range(self.V)] for j in range(self.V)]
        for i in range(self.V):
            for j in range(self.V):
                reach[i][j] = self.grafo[i][j]
        for k in range(self.V):
            for i in range(self.V):
                for j in range(self.V):
                    reach[i][j] = reach[i][j] or (reach[i][k] and reach[k][j])
        return reach

grafo = Grafo(4)
grafo.grafo = [[1, 1, 0, 1],
        [0, 1, 1, 0],
        [0, 0, 1, 1],
        [0, 0, 0, 1]
        ]
print(grafo.warshall())


##### Algoritmo de Kruskal

class Grafo:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.bordes = []

    def agregar_borde(self, vertice1, vertice2, peso):
        self.bordes.append([vertice1, vertice2, peso])

    def buscar(self, padre, vertice):
        if padre[vertice] == vertice:
            return vertice
        return self.buscar(padre, padre[vertice])

    def unir(self, padre, rango, vertice1, vertice2):
        raiz1 = self.buscar(padre, vertice1)
        raiz2 = self.buscar(padre, vertice2)
        if rango[raiz1] < rango[raiz2]:
            padre[raiz1] = raiz2
        elif rango[raiz1] > rango[raiz2]:
            padre[raiz2] = raiz1
        else:
            padre[raiz2] = raiz1
            rango[raiz1] += 1

    def kruskal(self):
        arbol_expansion_minima = []
        indice_bordes = 0
        num_bordes = 0
        self.bordes = sorted(self.bordes, key=lambda item: item[2])
        padre = []
        rango = []
        for nodo in range(self.num_vertices):
            padre.append(nodo)
            rango.append(0)
        while num_bordes < self.num_vertices - 1:
            vertice1, vertice2, peso = self.bordes[indice_bordes]
            indice_bordes = indice_bordes + 1
            raiz1 = self.buscar(padre, vertice1)
            raiz2 = self.buscar(padre, vertice2)
            if raiz1 != raiz2:
                num_bordes = num_bordes + 1
                arbol_expansion_minima.append([vertice1, vertice2, peso])
                self.unir(padre, rango, raiz1, raiz2)
        return arbol_expansion_minima

grafos = Grafo(4)
grafos.agregar_borde(0, 1, 10)
grafos.agregar_borde(0, 2, 6)
grafos.agregar_borde(0, 3, 5)
grafos.agregar_borde(1, 3, 15)
grafos.agregar_borde(2, 3, 4)
resultado = grafos.kruskal()
print("Los bordes en el árbol de expansión mínima son:")
for vertice1, vertice2, peso in resultado:
        print("Vertice1: ", vertice1, ", Vertice2: ", vertice2, ", Peso: ", peso)



